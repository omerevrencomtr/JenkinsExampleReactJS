def imageTags = ['WEB_IMAGE_TAG', 'latest', '${BUILD_NUMBER}']

pipeline {
    environment {
        dockerImage = ''
        registryUrl = 'https://docker-push.xperlms.com'
        registryCredential = 'docker-registery'
        imageName = "xpermeet/web"
        buildArgs = "-f dev.Dockerfile . --network host"
        gitCredential = 'codecommit'
        xpermeetLibGitUrl = 'https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/xpermeet-lib'
        xperDriveLibGitUrl = 'https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/xperdrive-lib'
    }
    agent {
        node {
            label 'base'
        }
    }
    stages {
        stage('Cloning Git xpermeet-lib') {
            steps {
                sh 'mkdir -p xpermeet-lib'
                dir("xpermeet-lib") {
                    git branch: "genel-kurul-dev", credentialsId: gitCredential, url: xpermeetLibGitUrl
                }
            }
        }
        stage('Cloning Git xperdrive-lib') {
            steps {
                sh 'mkdir -p xperdrive-lib'
                dir("xperdrive-lib") {
                    git branch: "master", credentialsId: gitCredential, url: xperDriveLibGitUrl
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    container('base') {
                        docker.withRegistry(registryUrl, registryCredential) {
                            dockerImage = docker.build(imageName, buildArgs)
                        }
                    }
                }
            }
        }
        stage('Push') {
            steps {
                script {
                    container('base') {
                        docker.withRegistry(registryUrl, registryCredential) {
                            for (int i = 0; i < imageTags.size(); ++i) {
                                dockerImage.push("${imageTags[i]}")
                            }
                        }
                    }
                }
            }
        }
        stage('Trigger Deploy') {
            steps {
                script {
                    ret = build(job: "egk-testtpdpx/web-fe-deploy/eks-egk-test",
                            parameters: [
                                    string(name: "WEB_IMAGE_TAG", value: "${BUILD_NUMBER}"),
                            ],
                            propagate: true,
                            wait: true)
                    currentBuild.result = ret.result
                }
            }
        }
    }
}
